var fooformsApp = angular.module("fooformsApp", ["ngRoute", "restangular", "ui.bootstrap", "textAngular", "ui.calendar"]);
fooformsApp.config(function ($routeProvider, $locationProvider) {
    "use strict";
    $locationProvider.html5Mode(!0).hashPrefix("!"), $routeProvider.when("/", {redirectTo: "/dashboard"}).when("/dashboard", {templateUrl: "/partials/dashboard", controller: "DashboardCtrl"}).when("/clouds", {templateUrl: "/partials/clouds", controller: "CloudCtrl"}).when("/apps", {templateUrl: "/partials/apps", controller: "AppsCtrl"}).when("/people", {templateUrl: "/partials/people"}).when("/calendar", {templateUrl: "/partials/calendar"}).when("/profile", {templateUrl: "/partials/profile", controller: "ProfileCtrl"}).when("/userGuide", {templateUrl: "/partials/userGuide"}).when("/settings", {templateUrl: "/partials/settings"}).when("/admin", {templateUrl: "/partials/admin"}).when("/appBuilder", {templateUrl: "/partials/appBuilder", controller: "fieldsCtrl"}).otherwise({redirectTo: "/404"})
}), fooformsApp.controller("AppsCtrl", ["$scope", "Restangular", function ($scope, Restangular) {
    "use strict";
    Restangular.setBaseUrl("/api"), Restangular.setDefaultHeaders({"Content-Type": "application/json"});
    var appApi = Restangular.all("apps"), updateAppList = function () {
        appApi.getList().then(function (apps) {
            console.log("Got apps: " + JSON.stringify(apps)), $scope.apps = apps
        })
    };
    updateAppList()
}]), angular.module("appBuilder", ["appBuilder.filters", "appBuilder.services", "appBuilder.directives", "appBuilder.controllers", "ui.bootstrap"]), fooformsApp.controller("fieldsCtrl", ["$scope", "$http", "DragDropHandler", "$modal", "Restangular", function ($scope, $http, DragDropHandler, $modal, Restangular) {
    "use strict";
    Restangular.setBaseUrl("/api"), Restangular.setDefaultHeaders({"Content-Type": "application/json"});
    var appApi = Restangular.all("apps"), updateAppList = function () {
        appApi.getList().then(function (apps) {
            console.log("Got apps: " + JSON.stringify(apps)), $scope.apps = apps
        })
    };
    updateAppList(), $http.get("/js/appBuilder/inputTypes.json").success(function (data) {
        $scope.inputTypes = data.inputTypes, $scope.icons = data.icons
    }), $scope.app = {id: Math.ceil(1e3 * Math.random()), name: "Untitled App", icon: "/assets/icons/color/document.png", description: "My new app - it's totally awesome!", menuLabel: "Untitled App", btnLabel: "New Post", settings: {allowComments: !0, status: "draft", displayOptions: [
        {feed: !0, grid: !0, card: !0}
    ]}, fields: [], version: 1, created: new Date, lastModified: new Date, owner: ""}, $scope.nowEditing = null, $scope.nowSubEditing = null, $scope.showFieldSettings = !1, $scope.showGroupSettings = !1, $scope.showAppSettings = !1, $scope.dragging = !1, $scope.updateObjects = function () {
        var itemIds = _.pluck($scope.app.fields, "id");
        console.log(itemIds), $scope.dragging = !1
    }, $scope.createObject = function (object, to) {
        var newItem = angular.copy(object);
        newItem.id = Math.ceil(1e3 * Math.random()), DragDropHandler.addObject(newItem, $scope.app.fields, to), $scope.dragging = !1
    }, $scope.deleteItem = function (itemId) {
        $scope.app.fields = _.reject($scope.app.fields, function (field) {
            return field.id == itemId
        })
    }, $scope.createSubObject = function (object, repeatBox, to) {
        var newItem = angular.copy(object);
        newItem.id = Math.ceil(1e3 * Math.random()), DragDropHandler.addObject(newItem, $scope.app.fields[repeatBox].fields, to), $scope.dragging = !1
    }, $scope.updateSubObjects = function () {
        var itemIds = _.pluck($scope.app.fields, "id");
        console.log(itemIds), $scope.dragging = !1
    }, $scope.deleteSubItem = function (itemId) {
        $scope.app.fields[$scope.nowEditing].fields = _.reject($scope.app.fields[$scope.nowEditing].fields, function (field) {
            return field.id == itemId
        })
    }, $scope.addOption = function ($index) {
        null == $scope.nowSubEditing ? $scope.app.fields[$scope.nowEditing].options.splice($index + 1, 0, {label: ""}) : $scope.app.fields[$scope.nowEditing].fields[$scope.nowSubEditing].options.splice($index + 1, 0, {label: ""})
    }, $scope.addOptionObject = function ($index) {
        null == $scope.nowSubEditing ? $scope.app.fields[$scope.nowEditing].options.splice($index + 1, 0, {label: "", selected: !1}) : $scope.app.fields[$scope.nowEditing].fields[$scope.nowSubEditing].options.splice($index + 1, 0, {label: "", selected: !1})
    }, $scope.deleteOption = function ($index) {
        null == $scope.nowSubEditing ? $scope.app.fields[$scope.nowEditing].options.splice($index, 1) : $scope.app.fields[$scope.nowEditing].fields[$scope.nowSubEditing].options.splice($index, 1)
    }, $scope.showBorders = function (show) {
        $scope.dragging = show, $scope.nowEditing = null, $scope.nowSubEditing = null, $scope.$apply()
    }, $scope.showPlaceHolder = function (container) {
        return 0 == container.length
    }, $scope.editField = function (fieldId, subFieldId, objectType, $event) {
        switch (objectType) {
            case"Application":
                $scope.nowEditing = null, $scope.nowSubEditing = null, $scope.showFieldSettings = !1, $scope.showGroupSettings = !1, $scope.showAppSettings = !0;
                break;
            case"Field":
                $scope.nowEditing = fieldId, $scope.nowSubEditing = subFieldId, $scope.showFieldSettings = !0, $scope.showGroupSettings = !1, $scope.showAppSettings = !1;
                break;
            case"Group":
                $scope.nowEditing = fieldId, $scope.nowSubEditing = subFieldId, $scope.showFieldSettings = !1, $scope.showGroupSettings = !0, $scope.showAppSettings = !1;
                break;
            default:
                $scope.nowEditing = null, $scope.nowSubEditing = null, $scope.showFieldSettings = !1, $scope.showGroupSettings = !1, $scope.showAppSettings = !1
        }
        $event.stopPropagation(), angular.element("#appTabSettings").tab("show")
    }, $scope.setCalculationField = function (selectedItem) {
        $scope.app.fields[$scope.nowEditing].options.field1.item = null == $scope.nowSubEditing ? selectedItem : "value"
    }, $scope.open = function () {
        var modalInstance = $modal.open({templateUrl: "/partials/icons.html", controller: ModalInstanceCtrl, resolve: {icons: function () {
            return $scope.icons
        }}});
        modalInstance.result.then(function (selectedItem) {
            $scope.app.icon = selectedItem
        })
    }, $scope.saveApp = function (appToSave) {
        console.log(JSON.stringify(appToSave)), appApi.post(appToSave).then(function () {
            updateAppList()
        }, function (err) {
            console.log(err.status)
        })
    }
}]);
var ModalInstanceCtrl = function ($scope, $modalInstance, icons) {
    "use strict";
    $scope.icons = icons, $scope.chosen = {icon: $scope.icons[0]}, $scope.ok = function () {
        $modalInstance.close($scope.chosen.icon)
    }, $scope.cancel = function () {
        $modalInstance.dismiss("cancel")
    }
};
fooformsApp.factory("DragDropHandler", [function () {
    "use strict";
    return{dragObject: void 0, addObject: function (object, objects, to) {
        objects.splice(to, 0, object)
    }, moveObject: function (objects, from, to) {
        objects.splice(to, 0, objects.splice(from, 1)[0])
    }}
}]).directive("draggable", ["DragDropHandler", function (DragDropHandler) {
    return{scope: {draggable: "=", ngBorder: "&"}, link: function (scope, element, attrs) {
        element.draggable({connectToSortable: attrs.draggableTarget, helper: "clone", revert: "invalid", start: function () {
            DragDropHandler.dragObject = scope.draggable, scope.ngBorder({show: !0})
        }, stop: function () {
            DragDropHandler.dragObject = void 0, scope.ngBorder({show: !1}), scope.$parent.$apply()
        }}), element.disableSelection()
    }}
}]).directive("droppable", ["DragDropHandler", function (DragDropHandler) {
    return{scope: {droppable: "=", ngUpdate: "&", ngCreate: "&", ngBorder: "&"}, link: function (scope, element) {
        element.sortable(), element.disableSelection(), element.on("sortstart", function () {
            scope.$parent.showBorders(!0)
        }), element.on("sortdeactivate", function (event, ui) {
            try {
                var from = angular.element(ui.item).scope().$index;
                scope.$parent.nowEditing = from;
                var to = element.children().index(ui.item);
                to >= 0 && scope.$apply(function () {
                    from >= 0 ? (DragDropHandler.moveObject(scope.droppable, from, to), scope.ngUpdate({from: from, to: to})) : (scope.ngCreate({object: DragDropHandler.dragObject, to: to}), ui.item.remove())
                })
            } catch (e) {
                alert(e)
            }
            scope.$parent.$apply()
        })
    }}
}]).directive("compile",function ($compile) {
    return function (scope, element, attrs) {
        scope.$watch(function (scope) {
            return scope.$eval(attrs.compile)
        }, function (value) {
            element.html(value), $compile(element.contents())(scope)
        })
    }
}).directive("subdroppable", ["DragDropHandler", function (DragDropHandler) {
    return{scope: {subdroppable: "=", ngUpdate: "&", ngCreate: "&", ngBorder: "&"}, link: function (scope, element) {
        element.sortable(), element.disableSelection(), element.on("sortstart", function () {
            scope.$parent.showBorders(!0)
        }), element.on("sortdeactivate", function (event, ui) {
            var repeatBox = angular.element(ui.item).scope().$index, from = angular.element(ui.item).scope().$index, to = element.children().index(ui.item);
            scope.$parent.nowEditing = from, scope.$parent.nowSubEditing = repeatBox, to >= 0 && scope.$apply(function () {
                void 0 !== angular.element(ui.item).scope().subField ? (DragDropHandler.moveObject(scope.subdroppable, from, to), scope.ngUpdate({from: from, to: to})) : (scope.ngCreate({object: DragDropHandler.dragObject, repeatbox: repeatBox, to: to}), ui.item.remove())
            }), event.stopPropagation(), scope.$parent.$apply()
        })
    }}
}]), fooformsApp.filter("filterTypes", function () {
    "use strict";
    return function (inputs, category) {
        var categoryFilter, standard = ["text", "textarea", "email", "select", "checkbox", "radio", "paragraph", "date", "groupbox"], numbers = ["number", "calculation", "currency", "sum", "payment", "progress"], people = ["to", "user", "signature", "profile", "activity"], advanced = ["status", "labels", "html", "groupBox", "rating", "canvas", "button"], filtered = [];
        try {
            switch (category) {
                case"standard":
                    categoryFilter = standard;
                    break;
                case"number":
                    categoryFilter = numbers;
                    break;
                case"people":
                    categoryFilter = people;
                    break;
                case"advanced":
                    categoryFilter = advanced;
                    break;
                default:
                    return inputs
            }
            categoryFilter && angular.forEach(inputs, function (input) {
                categoryFilter.indexOf(input.type) > -1 && filtered.push(input)
            })
        } catch (err) {
            console.err(err.toString())
        }
        return filtered
    }
}), fooformsApp.service("CalculatorService", function (MathService) {
    "use strict";
    this.square = function (a) {
        return MathService.multiply(a, a)
    }, this.cube = function (a) {
        return MathService.multiply(a, MathService.multiply(a, a))
    }
}), angular.module("ui.calendar", []).constant("uiCalendarConfig", {}).controller("uiCalendarCtrl", ["$scope", "$timeout", function ($scope, $timeout) {
    var sourceSerialId = 1, eventSerialId = 1, sources = $scope.eventSources, extraEventSignature = $scope.calendarWatchEvent ? $scope.calendarWatchEvent : angular.noop, wrapFunctionWithScopeApply = function (functionToWrap) {
        var wrapper;
        return functionToWrap && (wrapper = function () {
            var args = arguments;
            $timeout(function () {
                functionToWrap.apply(this, args)
            })
        }), wrapper
    };
    this.eventsFingerprint = function (e) {
        return e.__uiCalId || (e.__uiCalId = eventSerialId++), "" + e.__uiCalId + (e.id || "") + (e.title || "") + (e.url || "") + (+e.start || "") + (+e.end || "") + (e.allDay || "") + (e.className || "") + extraEventSignature(e) || ""
    }, this.sourcesFingerprint = function (source) {
        return source.__id || (source.__id = sourceSerialId++)
    }, this.allEvents = function () {
        for (var arraySources = [], i = 0, srcLen = sources.length; srcLen > i; i++) {
            var source = sources[i];
            if (angular.isArray(source))arraySources.push(source); else if (angular.isObject(source) && angular.isArray(source.events)) {
                var extEvent = {};
                for (var key in source)"_uiCalId" !== key && "events" !== key && (extEvent[key] = source[key]);
                for (var eI = 0; eI < source.events.length; eI++)angular.extend(source.events[eI], extEvent);
                arraySources.push(source.events)
            }
        }
        return Array.prototype.concat.apply([], arraySources)
    }, this.changeWatcher = function (arraySource, tokenFn) {
        var self, getTokens = function () {
            for (var token, el, array = angular.isFunction(arraySource) ? arraySource() : arraySource, result = [], i = 0, n = array.length; n > i; i++)el = array[i], token = tokenFn(el), map[token] = el, result.push(token);
            return result
        }, subtractAsSets = function (a, b) {
            var i, n, result = [], inB = {};
            for (i = 0, n = b.length; n > i; i++)inB[b[i]] = !0;
            for (i = 0, n = a.length; n > i; i++)inB[a[i]] || result.push(a[i]);
            return result
        }, map = {}, applyChanges = function (newTokens, oldTokens) {
            var i, n, el, token, replacedTokens = {}, removedTokens = subtractAsSets(oldTokens, newTokens);
            for (i = 0, n = removedTokens.length; n > i; i++) {
                var removedToken = removedTokens[i];
                el = map[removedToken], delete map[removedToken];
                var newToken = tokenFn(el);
                newToken === removedToken ? self.onRemoved(el) : (replacedTokens[newToken] = removedToken, self.onChanged(el))
            }
            var addedTokens = subtractAsSets(newTokens, oldTokens);
            for (i = 0, n = addedTokens.length; n > i; i++)token = addedTokens[i], el = map[token], replacedTokens[token] || self.onAdded(el)
        };
        return self = {subscribe: function (scope, onChanged) {
            scope.$watch(getTokens, function (newTokens, oldTokens) {
                onChanged && onChanged(newTokens, oldTokens) === !1 || applyChanges(newTokens, oldTokens)
            }, !0)
        }, onAdded: angular.noop, onChanged: angular.noop, onRemoved: angular.noop}
    }, this.getFullCalendarConfig = function (calendarSettings, uiCalendarConfig) {
        var config = {};
        return angular.extend(config, uiCalendarConfig), angular.extend(config, calendarSettings), angular.forEach(config, function (value, key) {
            "function" == typeof value && (config[key] = wrapFunctionWithScopeApply(config[key]))
        }), config
    }
}]).directive("uiCalendar", ["uiCalendarConfig", "$locale", function (uiCalendarConfig, $locale) {
    var tValues = function (data) {
        var r, k;
        r = [];
        for (k in data)r[k] = data[k];
        return r
    }, dtf = $locale.DATETIME_FORMATS;
    return uiCalendarConfig = angular.extend({monthNames: tValues(dtf.MONTH), monthNamesShort: tValues(dtf.SHORTMONTH), dayNames: tValues(dtf.DAY), dayNamesShort: tValues(dtf.SHORTDAY)}, uiCalendarConfig || {}), {restrict: "A", scope: {eventSources: "=ngModel", calendarWatchEvent: "&"}, controller: "uiCalendarCtrl", link: function (scope, elm, attrs, controller) {
        function getOptions() {
            var fullCalendarConfig, calendarSettings = attrs.uiCalendar ? scope.$parent.$eval(attrs.uiCalendar) : {};
            fullCalendarConfig = controller.getFullCalendarConfig(calendarSettings, uiCalendarConfig), options = {eventSources: sources}, angular.extend(options, fullCalendarConfig);
            var options2 = {};
            for (var o in options)"eventSources" !== o && (options2[o] = options[o]);
            return JSON.stringify(options2)
        }

        var sources = scope.eventSources, sourcesChanged = !1, eventSourcesWatcher = controller.changeWatcher(sources, controller.sourcesFingerprint), eventsWatcher = controller.changeWatcher(controller.allEvents, controller.eventsFingerprint), options = null;
        scope.destroy = function () {
            scope.calendar = attrs.calendar ? scope.$parent[attrs.calendar] = elm.html("") : elm.html("")
        }, scope.init = function () {
            scope.calendar.fullCalendar(options)
        }, eventSourcesWatcher.onAdded = function (source) {
            scope.calendar.fullCalendar("addEventSource", source), sourcesChanged = !0
        }, eventSourcesWatcher.onRemoved = function (source) {
            scope.calendar.fullCalendar("removeEventSource", source), sourcesChanged = !0
        }, eventsWatcher.onAdded = function (event) {
            scope.calendar.fullCalendar("renderEvent", event)
        }, eventsWatcher.onRemoved = function (event) {
            scope.calendar.fullCalendar("removeEvents", function (e) {
                return e === event
            })
        }, eventsWatcher.onChanged = function (event) {
            scope.calendar.fullCalendar("updateEvent", event)
        }, scope.destroy(), getOptions(), scope.init(), eventSourcesWatcher.subscribe(scope), eventsWatcher.subscribe(scope, function () {
            return sourcesChanged === !0 ? (sourcesChanged = !1, !1) : void 0
        }), scope.$watch(getOptions, function (newO, oldO) {
            newO !== oldO && (scope.destroy(), scope.init())
        })
    }}
}]), fooformsApp.controller("CloudCtrl", function ($scope, $route, Restangular) {
    "use strict";
    Restangular.setBaseUrl("/api"), Restangular.setDefaultHeaders({"Content-Type": "application/json"});
    var cloudApi = Restangular.all("clouds");
    $scope.tabs = [
        {name: "Clouds", active: !0},
        {name: "Settings", active: !1}
    ], $scope.nowEditing = 0, $scope.showBorders = function () {
    };
    var updateCloudList = function () {
        cloudApi.getList().then(function (clouds) {
            $scope.clouds = clouds
        })
    };
    updateCloudList(), $scope.newCloud = {}, $scope.newTab = {}, $scope.createCloud = function (cloud) {
        cloudApi.post(cloud).then(function () {
            updateCloudList()
        }, function (err) {
            console.log(err.status)
        })
    }, $scope.updateCloud = function (cloud) {
        cloud.put().then(function () {
            updateCloudList()
        })
    }, $scope.deleteCloud = function (cloud) {
        cloud.remove().then(function () {
            updateCloudList()
        }, function (err) {
            console.log(err.status)
        })
    }, $scope.createTab = function (tab) {
        $scope.tabs.push(angular.copy(tab)), $scope.$apply(), angular.element("#" + tab.name).tab("show"), $scope.newTab = {}
    }
}), fooformsApp.controller("DashboardCtrl", function () {
}), fooformsApp.controller("ProfileCtrl", function ($scope, $route, Restangular) {
    Restangular.setBaseUrl("/api"), Restangular.one("user", "me").get().then(function (user) {
        $scope.user = user
    }), $scope.update = function (user) {
        $scope.user = angular.copy(user), $scope.user.put()
    }
});